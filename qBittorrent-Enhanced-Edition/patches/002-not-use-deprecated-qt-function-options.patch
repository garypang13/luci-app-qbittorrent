From 7c8846fc53803d104e1d6fdd3efeb77b06307545 Mon Sep 17 00:00:00 2001
From: Chocobo1 <Chocobo1@users.noreply.github.com>
Date: Sat, 16 May 2020 21:05:15 +0800
Subject: [PATCH 1/3] Don't use deprecated QRegularExpression option
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The following is the warning from compiler:
rss_item.cpp:70:79: warning: ‘QRegularExpression::OptimizeOnFirstUsageOption’ is deprecated: This option does not have any effect since Qt 5.12 [-Wdeprecated-declarations]
---
 src/base/rss/rss_item.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

--- a/src/base/rss/rss_item.cpp
+++ b/src/base/rss/rss_item.cpp
@@ -67,7 +67,7 @@ bool Item::isValidPath(const QString &pa
 {
     static const QRegularExpression re(
                 QString(R"(\A[^\%1]+(\%1[^\%1]+)*\z)").arg(Item::PathSeparator)
-                , QRegularExpression::DontCaptureOption | QRegularExpression::OptimizeOnFirstUsageOption);
+                , QRegularExpression::DontCaptureOption);
 
     if (path.isEmpty() || !re.match(path).hasMatch()) {
         qDebug() << "Incorrect RSS Item path:" << path;
--- a/src/gui/properties/speedplotview.cpp
+++ b/src/gui/properties/speedplotview.cpp
@@ -339,7 +339,7 @@ void SpeedPlotView::paintEvent(QPaintEve
     }
 
     // Set antialiasing for graphs
-    painter.setRenderHints(QPainter::Antialiasing | QPainter::HighQualityAntialiasing);
+    painter.setRenderHints(QPainter::Antialiasing);
 
     // draw graphs
     rect.adjust(3, 0, 0, 0); // Need, else graphs cross left gridline
--- a/src/gui/transferlistsortmodel.cpp
+++ b/src/gui/transferlistsortmodel.cpp
@@ -100,6 +100,14 @@ bool TransferListSortModel::lessThan_imp
         return lessThan_impl(left.sibling(left.row(), column), right.sibling(right.row(), column));
     };
 
+    const auto hashLessThan = [this, &left, &right]() -> bool
+    {
+        const TransferListModel *model = qobject_cast<TransferListModel *>(sourceModel());
+        const QString hashL = model->torrentHandle(left)->hash();
+        const QString hashR = model->torrentHandle(right)->hash();
+        return hashL < hashR;
+    };
+
     const int sortColumn = left.column();
     const QVariant leftValue = left.data(TransferListModel::UnderlyingDataRole);
     const QVariant rightValue = right.data(TransferListModel::UnderlyingDataRole);
@@ -138,8 +146,9 @@ bool TransferListSortModel::lessThan_imp
             else if (dateR.isValid()) {
                 return false;
             }
+
+            return hashLessThan();
         }
-        break;
 
     case TransferListModel::TR_QUEUE_POSITION: {
             // QVariant has comparators for all basic types
@@ -166,8 +175,9 @@ bool TransferListSortModel::lessThan_imp
             else if (dateR.isValid()) {
                 return true;
             }
+
+            return hashLessThan();
         }
-        break;
 
     case TransferListModel::TR_SEEDS:
     case TransferListModel::TR_PEERS: {
@@ -237,19 +247,11 @@ bool TransferListSortModel::lessThan_imp
         if (rightValue < 0) return true;
 
         return (leftValue < rightValue);
-
-    default:
-        if (leftValue != rightValue)
-            return QSortFilterProxyModel::lessThan(left, right);
-
-        return invokeLessThanForColumn(TransferListModel::TR_QUEUE_POSITION);
     }
 
-    // Finally, sort by hash
-    const TransferListModel *model = qobject_cast<TransferListModel *>(sourceModel());
-    const QString hashL = model->torrentHandle(left)->hash();
-    const QString hashR = model->torrentHandle(right)->hash();
-    return hashL < hashR;
+    return (leftValue != rightValue)
+        ? QSortFilterProxyModel::lessThan(left, right)
+        : invokeLessThanForColumn(TransferListModel::TR_QUEUE_POSITION);
 }
 
 bool TransferListSortModel::filterAcceptsRow(const int sourceRow, const QModelIndex &sourceParent) const
